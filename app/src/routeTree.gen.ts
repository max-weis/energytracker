/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PricesImport } from './routes/prices'
import { Route as IndexImport } from './routes/index'
import { Route as ReadingsIndexImport } from './routes/readings.index'
import { Route as ReadingsNewImport } from './routes/readings.new'

// Create/Update Routes

const PricesRoute = PricesImport.update({
  id: '/prices',
  path: '/prices',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ReadingsIndexRoute = ReadingsIndexImport.update({
  id: '/readings/',
  path: '/readings/',
  getParentRoute: () => rootRoute,
} as any)

const ReadingsNewRoute = ReadingsNewImport.update({
  id: '/readings/new',
  path: '/readings/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/prices': {
      id: '/prices'
      path: '/prices'
      fullPath: '/prices'
      preLoaderRoute: typeof PricesImport
      parentRoute: typeof rootRoute
    }
    '/readings/new': {
      id: '/readings/new'
      path: '/readings/new'
      fullPath: '/readings/new'
      preLoaderRoute: typeof ReadingsNewImport
      parentRoute: typeof rootRoute
    }
    '/readings/': {
      id: '/readings/'
      path: '/readings'
      fullPath: '/readings'
      preLoaderRoute: typeof ReadingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/prices': typeof PricesRoute
  '/readings/new': typeof ReadingsNewRoute
  '/readings': typeof ReadingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/prices': typeof PricesRoute
  '/readings/new': typeof ReadingsNewRoute
  '/readings': typeof ReadingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/prices': typeof PricesRoute
  '/readings/new': typeof ReadingsNewRoute
  '/readings/': typeof ReadingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/prices' | '/readings/new' | '/readings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/prices' | '/readings/new' | '/readings'
  id: '__root__' | '/' | '/prices' | '/readings/new' | '/readings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PricesRoute: typeof PricesRoute
  ReadingsNewRoute: typeof ReadingsNewRoute
  ReadingsIndexRoute: typeof ReadingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PricesRoute: PricesRoute,
  ReadingsNewRoute: ReadingsNewRoute,
  ReadingsIndexRoute: ReadingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/prices",
        "/readings/new",
        "/readings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/prices": {
      "filePath": "prices.tsx"
    },
    "/readings/new": {
      "filePath": "readings.new.tsx"
    },
    "/readings/": {
      "filePath": "readings.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
